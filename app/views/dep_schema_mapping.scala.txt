@(spec: domain.Spec)

-- # load atr data
atr = LOAD '${input_collection_name}.${input_dataset_name}_view_${input_view_name}' USING org.apache.hive.hcatalog.pig.HCatLoader();

-- # remove time from validfrom and valid until values since always set to 'T00:00:00.000+0200' after the actual date like '2008-01-01'
atr_remove_time = FOREACH atr GENERATE timestamp..origin,(SUBSTRING(validfrom,0,10)) AS  validfrom,(SUBSTRING(validuntil,0,10)) AS validuntil,slice_start..;

-- # filter data based on time
-- # here a feature is valid if its validity started but did not end inbetween slice_start/slice_end
atr_filter = FILTER atr_remove_time BY (validfrom <= '$slice_end' AND '$slice_end' <= validuntil)
-- workaround until we drop inactive users completely
 OR featurename == 'household_id';

-- # here, for panelcode features we collect valid from dates
atr_panelcode_full_silce_coverage = FILTER atr_remove_time BY featurename == 'panelcode';

atr_panelcode_gen = FOREACH atr_panelcode_full_silce_coverage GENERATE
    panelistid AS pnr,
	((TRIM(featurevalue) == 'IMPE' OR TRIM(featurevalue) == 'MEPI') ? validfrom : null ) AS desktop_panel,
	((TRIM(featurevalue) == 'MMPE') ? validfrom : null ) AS smartphone_panel,
	((TRIM(featurevalue) == 'MMT') ? validfrom : null ) AS tablet_panel;

atr_panelcode_group = group atr_panelcode_gen BY pnr;

atr_panelcode_group_gen = FOREACH atr_panelcode_group GENERATE
    group AS pnr,
	MIN(atr_panelcode_gen.desktop_panel) AS dep_desktop_panel,
	MIN(atr_panelcode_gen.smartphone_panel) AS dep_smartphone_panel,
	MIN(atr_panelcode_gen.tablet_panel) AS dep_tablet_panel;

-- # filter feature names we are interested in and based on their origin
atr_feature_filter = FILTER atr_filter BY (@spec.featureSelect);

-- # generating/projecting (pnr,output_column_name,output_column_value)
-- # converting longs to dates
atr_gen = FOREACH atr_feature_filter GENERATE panelistid AS pnr, featurename AS output_column_name, ((
                    featurename == 'WEP_Mitarbeitsbeginn' or
                    featurename == 'MobileMonitor_Tab_MAB' or
                    featurename == 'Mitarbeitsbeginn_HandyScan' or
                    featurename == 'Gekuendigt' or
                    featurename == 'MobileMonitor_Mitarbeitsbeginn') ?
                        ToString(ToDate((long)(featurevalue)),'yyyyMMdd') :
                        featurevalue
                ) AS output_column_value;


-- normalize categorical values, such that suffixed dummy variable names are still valid schema field names
DEFINE CleanColumnName com.gfk.hyperlane.pigudf.udf.CleanFeatureValues('output_column_name');
atr_gen = FOREACH atr_gen GENERATE FLATTEN(CleanColumnName(*));

-- # group data
atr_grouped = GROUP atr_gen BY pnr;


-- # transpose data
DEFINE TransposeAtr com.gfk.hyperlane.pigudf.udf.TransposeData('pnr: chararray,
    household_id: chararray,
	alter_hh_fuehrende_person: chararray,
	alter_neu_haushaltsfuehrer: chararray,
	alter_usage_ipan_2008: chararray,
	anzahl_der_kinder_unter_14_j: chararray,
	anzahl_der_kinder_unter_15_j: chararray,
	anzahl_der_kinder_unter_18j: chararray,
	beruf_des_tn_ipan: chararray,
	berufsgruppe_tn_ipan: chararray,
	beschaeftigung_tn_ipan: chararray,
	bundeslaender: chararray,
	eigentumsverhaeltnisse_2003: chararray,
	familienlebenswelten: chararray,
	familienlebenswelten_neu: chararray,
	frueherer_beruf_tn_ipan: chararray,
	gebiet: chararray,
	gekuendigt: chararray,
	geschlecht_ipan: chararray,
	gxl_fixedline_ooh_intensity: int,
	gxl_fixedline_w_im_intensity: int,
	gxl_fixedline_wo_im_intensity: int,
	gxl_smartphone_intensity: int,
	gxl_smartphone_os: int,
	gxl_smartphone_user: int,
	gxl_tablet_intensity: int,
	gxl_tablet_main_user: int,
	gxl_tablet_os: int,
	gxl_tablet_user: int,
	gxl_tablet_user_intensity: int,
	gxl_tv_intensity: int,
	haushaltsgroesse: chararray,
	hh_mit_kindern_unter_4j: chararray,
	hhnettoeink_monatl_ab_2002: chararray,
	ilw_biografisch: chararray,
	internetnutzung_person: chararray,
	mitarbeitsbeginn_handyscan: chararray,
	mobilemonitor_mitarbeitsbeginn: chararray,
	mobilemonitor_tab_mab: chararray,
	nettoeinkommen_pro_kopf_1_2002: chararray,
	nettoeinkommen_pro_kopf_2_2002: chararray,
	ortsgroesse: chararray,
	regierungsbezirke_ab_2002: chararray,
	schulbildung_3_ipan: chararray,
	schulbildung_ipan: chararray,
	soziale_schicht: chararray,
	stellung_im_haushalt_person: chararray,
	wep_mitarbeitsbeginn: chararray,
	wohlstandsklassen_oecd_ab_2001: chararray,
	wohn_mietverhaeltnisse_2003: chararray,
	zahl_der_kinder_bis_6_jahre: chararray,
	geburtsjahr_vtab_person: chararray,
	haushaltsfuehrer: chararray,
	hauptverdiener: chararray,

	roper_styles_gesamt_2007: chararray,
	roper_styles_gesamt: chararray,
	traditionelle_lebensfhrung: chararray,
	innovationsneigung: chararray,
	erlebnisorientierung: chararray,
	nostalgie: chararray,
	mitrgegenber_neuprod: chararray,
	qualittsorientierung: chararray,
	avantgardisten: chararray
	');

panelist_records = FOREACH atr_grouped GENERATE FLATTEN(TransposeAtr(*));
-- filter out records where only household_id is set
panelist_records = FILTER panelist_records BY com.gfk.hyperlane.pigudf.udf.NumberOfSetFields(alter_hh_fuehrende_person..) > 0;


DEFINE CleanValues com.gfk.hyperlane.pigudf.udf.CleanFeatureValues('-pnr,household_id');
panelist_records = FOREACH panelist_records GENERATE FLATTEN(CleanValues(*)),
        SUBSTRING(pnr, (int) SIZE(household_id), (int) SIZE(pnr)) AS panel_household_person_id;

--#########################################################################################################################
-- addind metric fields for
-- Alter_Usage_IPAN_2008, Haushaltsgroesse, Haushaltsgroesse, Nettoeinkommen_pro_Kopf_1_2002, HHnettoeink_monatl_ab_2002
--#########################################################################################################################

panelist_records_metrics = FOREACH panelist_records GENERATE *, -2 AS gxl_fixedline_intensity,

    @for((fieldName,fieldMapping) <- spec.mappedFields) {
        CASE @fieldName
            @for((key,value) <- fieldMapping) { WHEN '@key' THEN value
            }
        END AS mst_age_metric,
    }

	'$slice_end' AS dep_valid_from,
	'$slice_end' AS dep_valid_until;

panelist_records_metrics_pms = FOREACH panelist_records_metrics  GENERATE FLATTEN(com.gfk.hyperlane.pigudf.udf.RemovePrefixedDuplicates(*));

panelist_records_metrics_pms = JOIN panelist_records_metrics_pms BY pnr LEFT, atr_panelcode_group_gen BY pnr USING 'replicated';

-- removing old panel info (since it comes with a prefix from the join)
panelist_records_metrics_pms = FOREACH panelist_records_metrics_pms
                               GENERATE FLATTEN(com.gfk.hyperlane.pigudf.udf.RemovePrefixedDuplicates(*));

DEFINE RenameAtrFields com.gfk.hyperlane.pigudf.udf.RenameFields('
    household_id->panel_household_id,
	alter_hh_fuehrende_person->gxl_agehh_hhleader_1,
	alter_usage_ipan_2008->gxl_agegroup_1,
	alter_neu_haushaltsfuehrer->gxl_agehh_hhleader_2,
	anzahl_der_kinder_unter_14_j->gxl_childreninhh_u14,
	anzahl_der_kinder_unter_15_j->gxl_childreninhh_u15,
	anzahl_der_kinder_unter_18j->gxl_childreninhh_u18,
	beruf_des_tn_ipan->gxl_profession_1,
	berufsgruppe_tn_ipan->gxl_profession_2,
	beschaeftigung_tn_ipan->gxl_profession_4,
	bundeslaender->gxl_region_1,
	eigentumsverhaeltnisse_2003->gxl_habitation_homeownership,
	familienlebenswelten->gxl_lifestage_2,
	familienlebenswelten_neu->gxl_lifestage_3,
	frueherer_beruf_tn_ipan->gxl_profession_3,
	gebiet->gxl_region_0,
	gekuendigt->de_gekuendigt,
	hh_mit_kindern_unter_4j->gxl_childreninhh_u04,
	hhnettoeink_monatl_ab_2002->gxl_income_hh_net,
	haushaltsgroesse->gxl_sizeofhh,
	ilw_biografisch->gxl_lifestage_1,
	internetnutzung_person->de_usage_frequency,
	mitarbeitsbeginn_handyscan->de_mitarbeitsbeginn_handyscan,
	mobilemonitor_mitarbeitsbeginn->de_mobilemonitor_mitarbeitsbeginn,
	mobilemonitor_tab_mab->de_mobilemonitor_tab_mab,
	nettoeinkommen_pro_kopf_1_2002->gxl_income_ind_net_1,
	nettoeinkommen_pro_kopf_2_2002->gxl_income_ind_net_2,
	ortsgroesse->gxl_citytype_sizeofcity,
	regierungsbezirke_ab_2002->gxl_region_2,
	roper_styles_gesamt_2007->gxl_roper_styles,
	schulbildung_3_ipan->gxl_educationlevel_2,
	schulbildung_ipan->gxl_educationlevel_1,
	soziale_schicht->gxl_socialclass_1,
	stellung_im_haushalt_person->gxl_roleinhh_status_in_hh,
	wep_mitarbeitsbeginn->de_wep_mitarbeitsbeginn,
	wohlstandsklassen_oecd_ab_2001->gxl_socialclass_2,
	wohn_mietverhaeltnisse_2003->gxl_habitation_hhinhouse,
	zahl_der_kinder_bis_6_jahre->gxl_childreninhh_u06,
	geburtsjahr_vtab_person->gxl_birthdate,
	haushaltsfuehrer->gxl_roleinhh_mainshopper,
	hauptverdiener->gxl_roleinhh_mainincome,
	qualittsorientierung->gxl_ls_quality,
	roper_styles_gesamt_2007->gxl_rcs,
	roper_styles_gesamt->gxl_rcs_hh,
	traditionelle_lebensfhrung->gxl_ls_traditional,
	innovationsneigung->gxl_ls_innovation,
	erlebnisorientierung->gxl_ls_event,
	nostalgie->gxl_ls_nostalgia,
	mitrgegenber_neuprod->gxl_ls_mistrust,
	qualittsorientierung->gxl_ls_quality,
	avantgardisten->gxl_newtrends
	');

international_records = FOREACH panelist_records_metrics_pms GENERATE FLATTEN(RenameAtrFields(*)),'-1' AS dep_schema_mapping_boundary;

IMPORT 'fold.pig';

result = foldToMap(international_records, 'de_', 'local_attributes');

STORE result INTO '$dep_schema_mapping_path/avro' USING com.gfk.hyperlane.pigudf.storage.MatchingAvroStorer('', '-f $schema_file');